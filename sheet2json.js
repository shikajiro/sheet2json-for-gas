// Generated by CoffeeScript 1.3.3

/*
* シートをjson文字列に変換する。
* シート間の#id と #refer を一致させることで、
* 階層構造のjsonも作成できる。
* @author shikajiro
*/


(function() {
  var Sheet2json, log, logTimeMesure, onOpen;

  log = Logger.log;

  logTimeMesure = function(methodName) {
    return log(methodName + ":" + new Date().toLocaleString());
  };

  onOpen = function() {
    var menuEntries, ss;
    ss = SpreadsheetApp.getActiveSpreadsheet();
    menuEntries = [
      {
        name: "sheet2json",
        functionName: "sheet2json"
      }
    ];
    return ss.addMenu("scripts", menuEntries);
  };

  Sheet2json = (function() {

    function Sheet2json(ss) {
      /*
           # 初期化。名前付けされた範囲を設定する。
      */

      var _destroy, _generateJson, _generateJsons, _generateSheet2Json, _getNameRanges, _init;
      _init = function() {
        var name, sheet, _i, _len, _ref, _results;
        _ref = ss.getSheets();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sheet = _ref[_i];
          name = sheet.getName();
          if (ss.getRangeByName(name)) {
            ss.removeNamedRange(name);
          }
          _results.push(ss.setNamedRange(name, _getNameRanges(sheet)));
        }
        return _results;
      };
      /*
          * keyとvalueの範囲を指定する。
      */

      _getNameRanges = function(sheet) {
        var colIndex, key, rowIndex, value, values, _i, _j, _len, _len1, _ref;
        values = sheet.getRange(1, 1, 10000, 255).getValues();
        _ref = values[0];
        for (rowIndex = _i = 0, _len = _ref.length; _i < _len; rowIndex = ++_i) {
          key = _ref[rowIndex];
          if (!key) {
            break;
          }
        }
        for (colIndex = _j = 0, _len1 = values.length; _j < _len1; colIndex = ++_j) {
          value = values[colIndex];
          if (!value[0]) {
            break;
          }
        }
        return sheet.getRange(1, 1, rowIndex - 1, colIndex - 1);
      };
      /*
          * 終了処理。
          * 名前付けした範囲をクリアする。
      */

      _destroy = function() {
        var name, sheet, _i, _len, _ref, _results;
        _ref = ss.getSheets();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sheet = _ref[_i];
          name = sheet.getName();
          if (ss.getRangeByName(name)) {
            _results.push(ss.removeNamedRange(name));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      /*
          *シートをjsonに変換するkeyとvalueの範囲を指定する。
      */

      _generateSheet2Json = function(sheet, id, type) {
        var datas, i, json, key, keys, ranges, record, values, _i, _j, _len, _len1;
        logTimeMesure("generateSheet2Json start");
        ranges = ss.getRangeByName(sheet.getName());
        keys = ranges.getValues()[0];
        values = ranges.getValues().slice(1);
        datas = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          record = values[_i];
          for (i = _j = 0, _len1 = keys.length; _j < _len1; i = ++_j) {
            key = keys[i];
            data[key] = record[i];
          }
          datas.push(data);
        }
        log(datas);
        logTimeMesure("generateSheet2Json end");
        json = Utilities.jsonStringify(datas);
        return json;
      };
      /*
          *配列からjson文字列を作成する
      */

      _generateJsons = function(keys, values, id, type) {
        var rec, refer, selection, _i, _j, _len, _len1, _results, _results1;
        selection = [];
        refer = keys.indexOf("#refer");
        if (id) {
          _results = [];
          for (_i = 0, _len = values.length; _i < _len; _i++) {
            rec = values[_i];
            if (refer !== -1 && id === rec[index]) {
              _results.push(selection.push(rec));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else if (!id && refer !== -1) {
          _results1 = [];
          for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
            rec = values[_j];
            if (!rec[refer]) {
              _results1.push(selection.push(rec));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        } else {
          selection = values;
          return selection;
        }
      };
      /*
          *一つの行集合からjson文字列を作成する。
      */

      _generateJson = function(keys, values, id) {
        var i, json, key, obj_type, selection, sheet, slice, value, _i, _len, _ref, _results;
        json = "";
        _results = [];
        for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
          value = values[i];
          value = "" + value;
          key = keys[i];
          if (key.search("#id") !== -1) {
            id = value;
            continue;
          }
          if (key.search("#refer") !== -1) {
            continue;
          }
          if (value.indexOf("#") !== -1) {
            obj_type = (_ref = value.search("]") === -1) != null ? _ref : {
              "obj": "array"
            };
            slice = 0;
            if (obj_type === "array") {
              slice = 3;
            } else {
              slice = 1;
            }
            sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(value.slice(slice));
            _results.push(selection = _generateSheet2Json(sheet, id, obj_type));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      /*
          *keyとvalueからjson文字列を作成する。
      */

      /*
          #  main
      */

      this.sheet2json = function() {
        var as, id, jsondata;
        logTimeMesure("sheet2json");
        ss = SpreadsheetApp.getActiveSpreadsheet();
        as = ss.getActiveSheet();
        id = "";
        _init();
        jsondata = _generateSheet2Json(as, id, "array");
        _destroy();
        Browser.msgBox(jsondata);
      };
    }

    return Sheet2json;

  })();

  function sheet2json() { new Sheet2json().sheet2json(); };


  function onOpen() { new Sheet2json().onOpen(); };


}).call(this);
